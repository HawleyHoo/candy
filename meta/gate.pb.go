// Code generated by protoc-gen-go.
// source: gate.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GateFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *GateFindUserRequest) Reset()                    { *m = GateFindUserRequest{} }
func (m *GateFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserRequest) ProtoMessage()               {}
func (*GateFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GateFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *GateFindUserResponse) Reset()                    { *m = GateFindUserResponse{} }
func (m *GateFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserResponse) ProtoMessage()               {}
func (*GateFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GateFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateFriendRequest struct {
	UserID  int64    `protobuf:"varint,1,opt,name=UserID" json:"UserID,omitempty"`
	Operate Relation `protobuf:"varint,2,opt,name=Operate,enum=candy.meta.Relation" json:"Operate,omitempty"`
	Msg     string   `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GateFriendRequest) Reset()                    { *m = GateFriendRequest{} }
func (m *GateFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFriendRequest) ProtoMessage()               {}
func (*GateFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type GateFriendResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateFriendResponse) Reset()                    { *m = GateFriendResponse{} }
func (m *GateFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFriendResponse) ProtoMessage()               {}
func (*GateFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GateFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCreateGroupRequest struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName" json:"GroupName,omitempty"`
}

func (m *GateCreateGroupRequest) Reset()                    { *m = GateCreateGroupRequest{} }
func (m *GateCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupRequest) ProtoMessage()               {}
func (*GateCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type GateCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateCreateGroupResponse) Reset()                    { *m = GateCreateGroupResponse{} }
func (m *GateCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupResponse) ProtoMessage()               {}
func (*GateCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GateCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateRegisterRequest) Reset()                    { *m = GateRegisterRequest{} }
func (m *GateRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterRequest) ProtoMessage()               {}
func (*GateRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type GateRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateRegisterResponse) Reset()                    { *m = GateRegisterResponse{} }
func (m *GateRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterResponse) ProtoMessage()               {}
func (*GateRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *GateRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserInfoRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateUpdateUserInfoRequest) Reset()                    { *m = GateUpdateUserInfoRequest{} }
func (m *GateUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoRequest) ProtoMessage()               {}
func (*GateUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type GateUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserInfoResponse) Reset()                    { *m = GateUpdateUserInfoResponse{} }
func (m *GateUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoResponse) ProtoMessage()               {}
func (*GateUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *GateUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserPasswordRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUpdateUserPasswordRequest) Reset()                    { *m = GateUpdateUserPasswordRequest{} }
func (m *GateUpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordRequest) ProtoMessage()               {}
func (*GateUpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type GateUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUpdateUserPasswordResponse) Reset()                    { *m = GateUpdateUserPasswordResponse{} }
func (m *GateUpdateUserPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordResponse) ProtoMessage()               {}
func (*GateUpdateUserPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *GateUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateGetUserInfoRequest struct {
	// 0:用户名称   1：用户ID
	Type     int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	UserID   int64  `protobuf:"varint,3,opt,name=UserID" json:"UserID,omitempty"`
}

func (m *GateGetUserInfoRequest) Reset()                    { *m = GateGetUserInfoRequest{} }
func (m *GateGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoRequest) ProtoMessage()               {}
func (*GateGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type GateGetUserInfoResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID       int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	User     string          `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	NickName string          `protobuf:"bytes,4,opt,name=NickName" json:"NickName,omitempty"`
	Avatar   []byte          `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateGetUserInfoResponse) Reset()                    { *m = GateGetUserInfoResponse{} }
func (m *GateGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoResponse) ProtoMessage()               {}
func (*GateGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GateGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateHeartbeatRequest struct {
}

func (m *GateHeartbeatRequest) Reset()                    { *m = GateHeartbeatRequest{} }
func (m *GateHeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatRequest) ProtoMessage()               {}
func (*GateHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

type GateHeartbeatResponse struct {
}

func (m *GateHeartbeatResponse) Reset()                    { *m = GateHeartbeatResponse{} }
func (m *GateHeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*GateHeartbeatResponse) ProtoMessage()               {}
func (*GateHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type GateUserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *GateUserLoginRequest) Reset()                    { *m = GateUserLoginRequest{} }
func (m *GateUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginRequest) ProtoMessage()               {}
func (*GateUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type GateUserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GateUserLoginResponse) Reset()                    { *m = GateUserLoginResponse{} }
func (m *GateUserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginResponse) ProtoMessage()               {}
func (*GateUserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GateUserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUserLogoutRequest struct {
}

func (m *GateUserLogoutRequest) Reset()                    { *m = GateUserLogoutRequest{} }
func (m *GateUserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutRequest) ProtoMessage()               {}
func (*GateUserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type GateUserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUserLogoutResponse) Reset()                    { *m = GateUserLogoutResponse{} }
func (m *GateUserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutResponse) ProtoMessage()               {}
func (*GateUserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GateUserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUploadFileRequest struct {
	File []byte `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`
}

func (m *GateUploadFileRequest) Reset()                    { *m = GateUploadFileRequest{} }
func (m *GateUploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileRequest) ProtoMessage()               {}
func (*GateUploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

type GateUploadFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUploadFileResponse) Reset()                    { *m = GateUploadFileResponse{} }
func (m *GateUploadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileResponse) ProtoMessage()               {}
func (*GateUploadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *GateUploadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCheckFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateCheckFileRequest) Reset()                    { *m = GateCheckFileRequest{} }
func (m *GateCheckFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileRequest) ProtoMessage()               {}
func (*GateCheckFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

type GateCheckFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Names  []string        `protobuf:"bytes,2,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateCheckFileResponse) Reset()                    { *m = GateCheckFileResponse{} }
func (m *GateCheckFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileResponse) ProtoMessage()               {}
func (*GateCheckFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *GateCheckFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateDownloadFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *GateDownloadFileRequest) Reset()                    { *m = GateDownloadFileRequest{} }
func (m *GateDownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileRequest) ProtoMessage()               {}
func (*GateDownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

type GateDownloadFileResponse struct {
	Header *ResponseHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Files  map[string][]byte `protobuf:"bytes,2,rep,name=Files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GateDownloadFileResponse) Reset()                    { *m = GateDownloadFileResponse{} }
func (m *GateDownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileResponse) ProtoMessage()               {}
func (*GateDownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *GateDownloadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateDownloadFileResponse) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type GatePushRequest struct {
	ID  []*PushID    `protobuf:"bytes,1,rep,name=ID" json:"ID,omitempty"`
	Msg *PushMessage `protobuf:"bytes,2,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GatePushRequest) Reset()                    { *m = GatePushRequest{} }
func (m *GatePushRequest) String() string            { return proto.CompactTextString(m) }
func (*GatePushRequest) ProtoMessage()               {}
func (*GatePushRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *GatePushRequest) GetID() []*PushID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *GatePushRequest) GetMsg() *PushMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GatePushResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GatePushResponse) Reset()                    { *m = GatePushResponse{} }
func (m *GatePushResponse) String() string            { return proto.CompactTextString(m) }
func (*GatePushResponse) ProtoMessage()               {}
func (*GatePushResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *GatePushResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateLoadMessageRequest struct {
	ID      int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Reverse bool  `protobuf:"varint,2,opt,name=Reverse" json:"Reverse,omitempty"`
}

func (m *GateLoadMessageRequest) Reset()                    { *m = GateLoadMessageRequest{} }
func (m *GateLoadMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageRequest) ProtoMessage()               {}
func (*GateLoadMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

type GateLoadMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msgs   []*PushMessage  `protobuf:"bytes,2,rep,name=Msgs" json:"Msgs,omitempty"`
}

func (m *GateLoadMessageResponse) Reset()                    { *m = GateLoadMessageResponse{} }
func (m *GateLoadMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageResponse) ProtoMessage()               {}
func (*GateLoadMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *GateLoadMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateLoadMessageResponse) GetMsgs() []*PushMessage {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type GateLoadGroupListRequest struct {
}

func (m *GateLoadGroupListRequest) Reset()                    { *m = GateLoadGroupListRequest{} }
func (m *GateLoadGroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadGroupListRequest) ProtoMessage()               {}
func (*GateLoadGroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

type GateLoadGroupListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Groups []*GroupInfo    `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *GateLoadGroupListResponse) Reset()                    { *m = GateLoadGroupListResponse{} }
func (m *GateLoadGroupListResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadGroupListResponse) ProtoMessage()               {}
func (*GateLoadGroupListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *GateLoadGroupListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateLoadGroupListResponse) GetGroups() []*GroupInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GateLoadFriendListRequest struct {
}

func (m *GateLoadFriendListRequest) Reset()                    { *m = GateLoadFriendListRequest{} }
func (m *GateLoadFriendListRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadFriendListRequest) ProtoMessage()               {}
func (*GateLoadFriendListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

type GateLoadFriendListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []int64         `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
}

func (m *GateLoadFriendListResponse) Reset()                    { *m = GateLoadFriendListResponse{} }
func (m *GateLoadFriendListResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadFriendListResponse) ProtoMessage()               {}
func (*GateLoadFriendListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *GateLoadFriendListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateSendMessageRequest struct {
	Msg *Message `protobuf:"bytes,1,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *GateSendMessageRequest) Reset()                    { *m = GateSendMessageRequest{} }
func (m *GateSendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateSendMessageRequest) ProtoMessage()               {}
func (*GateSendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *GateSendMessageRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GateSendMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id     int64           `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *GateSendMessageResponse) Reset()                    { *m = GateSendMessageResponse{} }
func (m *GateSendMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateSendMessageResponse) ProtoMessage()               {}
func (*GateSendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *GateSendMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*GateFindUserRequest)(nil), "candy.meta.GateFindUserRequest")
	proto.RegisterType((*GateFindUserResponse)(nil), "candy.meta.GateFindUserResponse")
	proto.RegisterType((*GateFriendRequest)(nil), "candy.meta.GateFriendRequest")
	proto.RegisterType((*GateFriendResponse)(nil), "candy.meta.GateFriendResponse")
	proto.RegisterType((*GateCreateGroupRequest)(nil), "candy.meta.GateCreateGroupRequest")
	proto.RegisterType((*GateCreateGroupResponse)(nil), "candy.meta.GateCreateGroupResponse")
	proto.RegisterType((*GateRegisterRequest)(nil), "candy.meta.GateRegisterRequest")
	proto.RegisterType((*GateRegisterResponse)(nil), "candy.meta.GateRegisterResponse")
	proto.RegisterType((*GateUpdateUserInfoRequest)(nil), "candy.meta.GateUpdateUserInfoRequest")
	proto.RegisterType((*GateUpdateUserInfoResponse)(nil), "candy.meta.GateUpdateUserInfoResponse")
	proto.RegisterType((*GateUpdateUserPasswordRequest)(nil), "candy.meta.GateUpdateUserPasswordRequest")
	proto.RegisterType((*GateUpdateUserPasswordResponse)(nil), "candy.meta.GateUpdateUserPasswordResponse")
	proto.RegisterType((*GateGetUserInfoRequest)(nil), "candy.meta.GateGetUserInfoRequest")
	proto.RegisterType((*GateGetUserInfoResponse)(nil), "candy.meta.GateGetUserInfoResponse")
	proto.RegisterType((*GateHeartbeatRequest)(nil), "candy.meta.GateHeartbeatRequest")
	proto.RegisterType((*GateHeartbeatResponse)(nil), "candy.meta.GateHeartbeatResponse")
	proto.RegisterType((*GateUserLoginRequest)(nil), "candy.meta.GateUserLoginRequest")
	proto.RegisterType((*GateUserLoginResponse)(nil), "candy.meta.GateUserLoginResponse")
	proto.RegisterType((*GateUserLogoutRequest)(nil), "candy.meta.GateUserLogoutRequest")
	proto.RegisterType((*GateUserLogoutResponse)(nil), "candy.meta.GateUserLogoutResponse")
	proto.RegisterType((*GateUploadFileRequest)(nil), "candy.meta.GateUploadFileRequest")
	proto.RegisterType((*GateUploadFileResponse)(nil), "candy.meta.GateUploadFileResponse")
	proto.RegisterType((*GateCheckFileRequest)(nil), "candy.meta.GateCheckFileRequest")
	proto.RegisterType((*GateCheckFileResponse)(nil), "candy.meta.GateCheckFileResponse")
	proto.RegisterType((*GateDownloadFileRequest)(nil), "candy.meta.GateDownloadFileRequest")
	proto.RegisterType((*GateDownloadFileResponse)(nil), "candy.meta.GateDownloadFileResponse")
	proto.RegisterType((*GatePushRequest)(nil), "candy.meta.GatePushRequest")
	proto.RegisterType((*GatePushResponse)(nil), "candy.meta.GatePushResponse")
	proto.RegisterType((*GateLoadMessageRequest)(nil), "candy.meta.GateLoadMessageRequest")
	proto.RegisterType((*GateLoadMessageResponse)(nil), "candy.meta.GateLoadMessageResponse")
	proto.RegisterType((*GateLoadGroupListRequest)(nil), "candy.meta.GateLoadGroupListRequest")
	proto.RegisterType((*GateLoadGroupListResponse)(nil), "candy.meta.GateLoadGroupListResponse")
	proto.RegisterType((*GateLoadFriendListRequest)(nil), "candy.meta.GateLoadFriendListRequest")
	proto.RegisterType((*GateLoadFriendListResponse)(nil), "candy.meta.GateLoadFriendListResponse")
	proto.RegisterType((*GateSendMessageRequest)(nil), "candy.meta.GateSendMessageRequest")
	proto.RegisterType((*GateSendMessageResponse)(nil), "candy.meta.GateSendMessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gate service

type GateClient interface {
	Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error)
	UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error)
	Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error)
	Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error)
	// SendMessage 发送消息
	SendMessage(ctx context.Context, in *GateSendMessageRequest, opts ...grpc.CallOption) (*GateSendMessageResponse, error)
	// Ready 连接成功后立刻调用Ready, 开启推送
	Ready(ctx context.Context, in *Message, opts ...grpc.CallOption) (Gate_ReadyClient, error)
	// AddFriend 添加好友或确认接受添加.
	Friend(ctx context.Context, in *GateFriendRequest, opts ...grpc.CallOption) (*GateFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error)
	// 加载好友列表
	LoadFriendList(ctx context.Context, in *GateLoadFriendListRequest, opts ...grpc.CallOption) (*GateLoadFriendListResponse, error)
	CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(ctx context.Context, in *GateLoadGroupListRequest, opts ...grpc.CallOption) (*GateLoadGroupListResponse, error)
	Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error)
	// Push 服务端向客户端推送接口, 这个接口应该只有服务器能调用.
	Push(ctx context.Context, in *GatePushRequest, opts ...grpc.CallOption) (*GatePushResponse, error)
}

type gateClient struct {
	cc *grpc.ClientConn
}

func NewGateClient(cc *grpc.ClientConn) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error) {
	out := new(GateRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error) {
	out := new(GateUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error) {
	out := new(GateUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error) {
	out := new(GateGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error) {
	out := new(GateUserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error) {
	out := new(GateUserLogoutResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMessage(ctx context.Context, in *GateSendMessageRequest, opts ...grpc.CallOption) (*GateSendMessageResponse, error) {
	out := new(GateSendMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Ready(ctx context.Context, in *Message, opts ...grpc.CallOption) (Gate_ReadyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gate_serviceDesc.Streams[0], c.cc, "/candy.meta.Gate/Ready", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateReadyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gate_ReadyClient interface {
	Recv() (*PushMessage, error)
	grpc.ClientStream
}

type gateReadyClient struct {
	grpc.ClientStream
}

func (x *gateReadyClient) Recv() (*PushMessage, error) {
	m := new(PushMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) Friend(ctx context.Context, in *GateFriendRequest, opts ...grpc.CallOption) (*GateFriendResponse, error) {
	out := new(GateFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Friend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error) {
	out := new(GateFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadFriendList(ctx context.Context, in *GateLoadFriendListRequest, opts ...grpc.CallOption) (*GateLoadFriendListResponse, error) {
	out := new(GateLoadFriendListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadFriendList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CreateGroup(ctx context.Context, in *GateCreateGroupRequest, opts ...grpc.CallOption) (*GateCreateGroupResponse, error) {
	out := new(GateCreateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadGroupList(ctx context.Context, in *GateLoadGroupListRequest, opts ...grpc.CallOption) (*GateLoadGroupListResponse, error) {
	out := new(GateLoadGroupListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Heartbeat(ctx context.Context, in *GateHeartbeatRequest, opts ...grpc.CallOption) (*GateHeartbeatResponse, error) {
	out := new(GateHeartbeatResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error) {
	out := new(GateUploadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error) {
	out := new(GateCheckFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CheckFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error) {
	out := new(GateDownloadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error) {
	out := new(GateLoadMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Push(ctx context.Context, in *GatePushRequest, opts ...grpc.CallOption) (*GatePushResponse, error) {
	out := new(GatePushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gate service

type GateServer interface {
	Register(context.Context, *GateRegisterRequest) (*GateRegisterResponse, error)
	UpdateUserInfo(context.Context, *GateUpdateUserInfoRequest) (*GateUpdateUserInfoResponse, error)
	UpdateUserPassword(context.Context, *GateUpdateUserPasswordRequest) (*GateUpdateUserPasswordResponse, error)
	GetUserInfo(context.Context, *GateGetUserInfoRequest) (*GateGetUserInfoResponse, error)
	Login(context.Context, *GateUserLoginRequest) (*GateUserLoginResponse, error)
	Logout(context.Context, *GateUserLogoutRequest) (*GateUserLogoutResponse, error)
	// SendMessage 发送消息
	SendMessage(context.Context, *GateSendMessageRequest) (*GateSendMessageResponse, error)
	// Ready 连接成功后立刻调用Ready, 开启推送
	Ready(*Message, Gate_ReadyServer) error
	// AddFriend 添加好友或确认接受添加.
	Friend(context.Context, *GateFriendRequest) (*GateFriendResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(context.Context, *GateFindUserRequest) (*GateFindUserResponse, error)
	// 加载好友列表
	LoadFriendList(context.Context, *GateLoadFriendListRequest) (*GateLoadFriendListResponse, error)
	CreateGroup(context.Context, *GateCreateGroupRequest) (*GateCreateGroupResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(context.Context, *GateLoadGroupListRequest) (*GateLoadGroupListResponse, error)
	Heartbeat(context.Context, *GateHeartbeatRequest) (*GateHeartbeatResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(context.Context, *GateUploadFileRequest) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(context.Context, *GateCheckFileRequest) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(context.Context, *GateDownloadFileRequest) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(context.Context, *GateLoadMessageRequest) (*GateLoadMessageResponse, error)
	// Push 服务端向客户端推送接口, 这个接口应该只有服务器能调用.
	Push(context.Context, *GatePushRequest) (*GatePushResponse, error)
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Register(ctx, req.(*GateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserInfo(ctx, req.(*GateUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserPassword(ctx, req.(*GateUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetUserInfo(ctx, req.(*GateGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Login(ctx, req.(*GateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Logout(ctx, req.(*GateUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateSendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMessage(ctx, req.(*GateSendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Ready_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateServer).Ready(m, &gateReadyServer{stream})
}

type Gate_ReadyServer interface {
	Send(*PushMessage) error
	grpc.ServerStream
}

type gateReadyServer struct {
	grpc.ServerStream
}

func (x *gateReadyServer) Send(m *PushMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Gate_Friend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Friend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Friend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Friend(ctx, req.(*GateFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).FindUser(ctx, req.(*GateFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadFriendList(ctx, req.(*GateLoadFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CreateGroup(ctx, req.(*GateCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadGroupList(ctx, req.(*GateLoadGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Heartbeat(ctx, req.(*GateHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UploadFile(ctx, req.(*GateUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CheckFile(ctx, req.(*GateCheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).DownloadFile(ctx, req.(*GateDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadMessage(ctx, req.(*GateLoadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Push(ctx, req.(*GatePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gate_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Gate_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Gate_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Gate_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gate_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gate_Logout_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Gate_SendMessage_Handler,
		},
		{
			MethodName: "Friend",
			Handler:    _Gate_Friend_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Gate_FindUser_Handler,
		},
		{
			MethodName: "LoadFriendList",
			Handler:    _Gate_LoadFriendList_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Gate_CreateGroup_Handler,
		},
		{
			MethodName: "LoadGroupList",
			Handler:    _Gate_LoadGroupList_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gate_Heartbeat_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Gate_UploadFile_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _Gate_CheckFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Gate_DownloadFile_Handler,
		},
		{
			MethodName: "LoadMessage",
			Handler:    _Gate_LoadMessage_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gate_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ready",
			Handler:       _Gate_Ready_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0x86, 0xfc, 0xd5, 0xf8, 0xc4, 0xaf, 0xdf, 0x8e, 0x4d, 0x13, 0x4f, 0xfd, 0x58, 0xc6, 0x36,
	0x43, 0xb2, 0x6e, 0xee, 0xe0, 0x01, 0x5b, 0xb1, 0x9b, 0xa1, 0xad, 0x93, 0x38, 0x80, 0xdd, 0x04,
	0x2a, 0x5a, 0x60, 0xdd, 0x86, 0x86, 0xb5, 0x58, 0x47, 0x48, 0x2c, 0x79, 0x92, 0x9c, 0xc2, 0xbb,
	0xd8, 0xbf, 0xd9, 0x8f, 0xd9, 0xd5, 0xfe, 0xd2, 0xc0, 0x0f, 0x59, 0x14, 0x29, 0x39, 0x41, 0xec,
	0x9b, 0x40, 0x34, 0x0f, 0xcf, 0x73, 0x78, 0xce, 0x43, 0x9e, 0x87, 0x01, 0x18, 0x91, 0x98, 0xb6,
	0x27, 0x61, 0x10, 0x07, 0x08, 0x86, 0xc4, 0x77, 0x67, 0xed, 0x31, 0x8d, 0x89, 0xdd, 0x18, 0x06,
	0xe3, 0x71, 0xe0, 0x8b, 0x19, 0xbc, 0x07, 0x77, 0x0e, 0x49, 0x4c, 0x0f, 0x3c, 0xdf, 0x7d, 0x13,
	0xd1, 0xd0, 0xa1, 0x7f, 0x4c, 0x69, 0x14, 0x23, 0x04, 0x15, 0x36, 0x6c, 0x59, 0xdb, 0xd6, 0x6e,
	0xdd, 0xe1, 0xdf, 0xf8, 0x14, 0x36, 0xb2, 0xa6, 0xd1, 0x24, 0xf0, 0x23, 0x8a, 0x3a, 0x50, 0x3b,
	0xa3, 0xc4, 0x95, 0xd6, 0xeb, 0x1d, 0xbb, 0x9d, 0xa2, 0xb5, 0x13, 0xab, 0x1e, 0xb7, 0x70, 0xa4,
	0x25, 0xda, 0x80, 0xea, 0x34, 0xa2, 0x61, 0xd4, 0x2a, 0x6d, 0x97, 0x77, 0xeb, 0x8e, 0x18, 0xe0,
	0x31, 0x7c, 0xc6, 0x11, 0x42, 0x8f, 0xfa, 0x6e, 0x12, 0xca, 0x26, 0xd4, 0x18, 0xdc, 0x51, 0x97,
	0xbb, 0x2f, 0x3b, 0x72, 0x84, 0xda, 0x70, 0xeb, 0x78, 0x42, 0x43, 0x12, 0xd3, 0x56, 0x69, 0xdb,
	0xda, 0x6d, 0x76, 0x36, 0xb2, 0xb8, 0x17, 0x24, 0xf6, 0x02, 0xdf, 0x49, 0x8c, 0xd0, 0x6d, 0x28,
	0x0f, 0xa2, 0x51, 0xab, 0xcc, 0x77, 0xc4, 0x3e, 0x71, 0x0f, 0x90, 0x0a, 0x77, 0xf3, 0xed, 0xe0,
	0x1f, 0x60, 0x93, 0x79, 0x7a, 0x19, 0x52, 0x12, 0xd3, 0xc3, 0x30, 0x98, 0x4e, 0x92, 0xe8, 0xef,
	0x43, 0x9d, 0x8f, 0x5f, 0x91, 0x31, 0x95, 0xd9, 0x4c, 0x7f, 0xc0, 0xbf, 0xc3, 0x96, 0xb1, 0x6e,
	0x89, 0xac, 0x36, 0xa1, 0x74, 0xd4, 0xe5, 0xd9, 0x28, 0x3b, 0xa5, 0xa3, 0x2e, 0xde, 0x17, 0xc5,
	0x75, 0xe8, 0xc8, 0x8b, 0xe2, 0x85, 0xc5, 0x45, 0x36, 0xac, 0x9d, 0x90, 0x28, 0xfa, 0x14, 0x84,
	0x2e, 0x77, 0x50, 0x77, 0xe6, 0x63, 0xfc, 0x4e, 0x14, 0x3e, 0x75, 0xb3, 0xc2, 0x10, 0x87, 0xf0,
	0x39, 0xf3, 0xfd, 0x66, 0xe2, 0xb2, 0xbf, 0xac, 0xb2, 0xfe, 0xc7, 0xe0, 0x8a, 0x40, 0x5f, 0x79,
	0xc3, 0x73, 0x9e, 0x4f, 0x19, 0x68, 0x32, 0x66, 0x54, 0x79, 0x7e, 0x49, 0x62, 0x12, 0xf2, 0x2a,
	0x37, 0x1c, 0x39, 0xc2, 0xa7, 0x60, 0xe7, 0x81, 0xac, 0x70, 0x1b, 0xc7, 0xf0, 0x20, 0x8b, 0x90,
	0x24, 0xef, 0xa6, 0x39, 0x77, 0xe1, 0x61, 0x91, 0xc3, 0x15, 0x86, 0x7d, 0x2a, 0x78, 0x7b, 0x48,
	0xe3, 0x9c, 0xd4, 0xc7, 0xb3, 0x89, 0xa0, 0x6c, 0xd5, 0xe1, 0xdf, 0x2c, 0x5e, 0x66, 0xa6, 0xa6,
	0x3e, 0x19, 0x2b, 0xa7, 0xb4, 0xac, 0x9e, 0x52, 0xfc, 0xb7, 0x25, 0x28, 0x9e, 0x81, 0x58, 0xdd,
	0x0e, 0xe6, 0x79, 0x2d, 0x17, 0x50, 0xa4, 0x52, 0x48, 0x91, 0x6a, 0x86, 0x22, 0x9b, 0x82, 0xe3,
	0x3d, 0x4a, 0xc2, 0xf8, 0x03, 0x25, 0xb1, 0xcc, 0x03, 0xde, 0x82, 0xbb, 0xda, 0xef, 0x22, 0x2c,
	0x7c, 0x20, 0x16, 0x30, 0xc0, 0x7e, 0x30, 0xf2, 0xfc, 0x9b, 0x16, 0xfa, 0x57, 0x01, 0xa0, 0xf8,
	0x59, 0x61, 0x7d, 0xb7, 0x32, 0xce, 0x83, 0xe9, 0x7c, 0x5b, 0x7d, 0x51, 0x78, 0x75, 0x62, 0x89,
	0xeb, 0xef, 0x89, 0x84, 0x99, 0x5c, 0x04, 0xc4, 0x3d, 0xf0, 0x2e, 0xa8, 0x92, 0x0c, 0x36, 0xe4,
	0xae, 0x1a, 0x0e, 0xff, 0x9e, 0x43, 0x2b, 0xc6, 0x4b, 0x40, 0x7f, 0x23, 0xca, 0xf0, 0xf2, 0x8c,
	0x0e, 0xcf, 0x55, 0xe4, 0x0d, 0xa8, 0xb2, 0x7a, 0x47, 0x2d, 0x4b, 0x34, 0x18, 0x3e, 0xc0, 0x44,
	0x04, 0xaa, 0x58, 0xa7, 0xd0, 0xbd, 0x6b, 0x43, 0xf7, 0xe6, 0x3d, 0x4c, 0x40, 0x94, 0x54, 0x88,
	0xa7, 0x82, 0xef, 0xdd, 0xe0, 0x93, 0xaf, 0x67, 0x23, 0x3f, 0xa6, 0x7f, 0x2d, 0x68, 0x99, 0x2b,
	0x96, 0x20, 0xc1, 0x3e, 0x54, 0x99, 0x0f, 0x11, 0xd7, 0x7a, 0xe7, 0xa9, 0xba, 0xa4, 0x08, 0xa8,
	0xcd, 0x57, 0xec, 0xfb, 0x71, 0x38, 0x73, 0xc4, 0x6a, 0xfb, 0x19, 0x40, 0xfa, 0x23, 0xeb, 0x9e,
	0xe7, 0x74, 0x26, 0x59, 0xcd, 0x3e, 0xd9, 0x6e, 0x2e, 0xc9, 0xc5, 0x54, 0x5c, 0x05, 0x0d, 0x47,
	0x0c, 0x7e, 0x2a, 0x3d, 0xb3, 0xf0, 0x29, 0xfc, 0x9f, 0xe1, 0x9c, 0x4c, 0xa3, 0xb3, 0x64, 0xeb,
	0x98, 0x13, 0xd3, 0xe2, 0x01, 0x21, 0x35, 0x20, 0x66, 0x74, 0xd4, 0xe5, 0x47, 0x79, 0x4f, 0x34,
	0xe8, 0x12, 0xdf, 0xe8, 0x96, 0x6e, 0x34, 0xa0, 0x51, 0x44, 0x46, 0x54, 0x74, 0xee, 0x03, 0xb8,
	0x9d, 0x22, 0x2c, 0xc1, 0x9e, 0x17, 0x82, 0x8b, 0xfd, 0x80, 0xb8, 0x89, 0x7f, 0x19, 0x70, 0x53,
	0x06, 0x9c, 0xdc, 0x33, 0x2d, 0xb8, 0xe5, 0xd0, 0x4b, 0x1a, 0x46, 0x62, 0xbf, 0x6b, 0x4e, 0x32,
	0xc4, 0x7f, 0x8a, 0x82, 0x67, 0x7c, 0x2c, 0x51, 0xbd, 0x27, 0x50, 0x19, 0x44, 0xa3, 0xa4, 0x78,
	0x85, 0x69, 0xe0, 0x46, 0xd8, 0x16, 0xd4, 0x61, 0xd8, 0x5c, 0x3d, 0xf4, 0xbd, 0x68, 0x7e, 0xc4,
	0xff, 0x12, 0x9d, 0x55, 0x9b, 0x5b, 0x22, 0xb2, 0x6f, 0xa1, 0x36, 0x62, 0x8e, 0x92, 0xd8, 0xee,
	0x66, 0x88, 0xc5, 0x66, 0xf8, 0xed, 0x2e, 0x8d, 0xf0, 0xbd, 0x14, 0x5f, 0x28, 0x2c, 0x35, 0xb8,
	0x8f, 0xa2, 0x23, 0xeb, 0x93, 0xab, 0x52, 0x94, 0xe5, 0x44, 0x51, 0xfe, 0x2c, 0x0a, 0xfc, 0x9a,
	0xfa, 0x7a, 0x81, 0x77, 0x04, 0xdb, 0x04, 0xc0, 0x1d, 0x15, 0x20, 0xc3, 0x34, 0xa9, 0xd0, 0x32,
	0x0e, 0x96, 0xbb, 0xa0, 0x3d, 0x37, 0xb9, 0xa0, 0x3d, 0xb7, 0xf3, 0x4f, 0x03, 0x2a, 0xcc, 0x3f,
	0x1a, 0xc0, 0x5a, 0xa2, 0xaf, 0xd0, 0x17, 0xfa, 0x89, 0xd5, 0x04, 0x9c, 0xbd, 0x5d, 0x6c, 0x20,
	0x63, 0x7b, 0x0f, 0xcd, 0xac, 0xda, 0x41, 0x3b, 0xfa, 0x9a, 0x5c, 0xc9, 0x65, 0x7f, 0x75, 0x95,
	0x99, 0x04, 0x38, 0x07, 0x64, 0x6a, 0x13, 0xb4, 0x57, 0xbc, 0x5a, 0x13, 0x44, 0xf6, 0xd7, 0xd7,
	0x31, 0x95, 0x60, 0x6f, 0x61, 0x5d, 0xd1, 0x0f, 0x08, 0xeb, 0x4b, 0x4d, 0xfd, 0x62, 0x3f, 0x5a,
	0x68, 0x23, 0xfd, 0xf6, 0xa1, 0xca, 0x7b, 0x2e, 0x32, 0x12, 0xaa, 0xb7, 0x75, 0xfb, 0xcb, 0x05,
	0x16, 0xd2, 0xdb, 0x31, 0xd4, 0x44, 0x2f, 0x45, 0x45, 0xc6, 0x69, 0x03, 0xb6, 0xf1, 0x22, 0x93,
	0x74, 0xdb, 0x0a, 0xef, 0xcc, 0x6d, 0x9b, 0xac, 0x36, 0xb7, 0x9d, 0x47, 0xdc, 0x1f, 0xa1, 0xea,
	0x50, 0xe2, 0xce, 0x50, 0x1e, 0xed, 0xed, 0xa2, 0x2b, 0xe7, 0x3b, 0x0b, 0x1d, 0x42, 0x4d, 0x9c,
	0x56, 0xf4, 0x40, 0xc7, 0xc9, 0xbc, 0xd9, 0xec, 0x87, 0x45, 0xd3, 0x32, 0x82, 0x01, 0xac, 0x25,
	0xcf, 0x48, 0x93, 0xed, 0xda, 0x5b, 0xd4, 0x64, 0xbb, 0xf1, 0x02, 0x7d, 0x0f, 0xcd, 0xec, 0x4d,
	0x62, 0xb2, 0x3d, 0xf7, 0x1a, 0x32, 0xd9, 0x5e, 0x70, 0x21, 0xbd, 0x85, 0x75, 0xe5, 0x8d, 0x66,
	0x56, 0xc2, 0x7c, 0xf8, 0x99, 0x95, 0xc8, 0x7b, 0xe4, 0xfd, 0x06, 0xff, 0xcb, 0xdc, 0xcf, 0xe8,
	0x71, 0x5e, 0x40, 0xfa, 0xd5, 0x6e, 0xef, 0x5c, 0x61, 0x25, 0xbd, 0x9f, 0x40, 0x7d, 0xae, 0x5b,
	0x4d, 0x8a, 0xeb, 0x52, 0xd7, 0xa4, 0xb8, 0x21, 0x7a, 0xd1, 0x6b, 0x80, 0x54, 0xb7, 0xe5, 0xd0,
	0x5c, 0x17, 0x80, 0x39, 0x34, 0x37, 0x65, 0xdf, 0x09, 0xd4, 0xe7, 0x82, 0xcc, 0x0c, 0x53, 0x57,
	0x76, 0x66, 0x98, 0xa6, 0x9a, 0xfb, 0x05, 0x1a, 0xaa, 0xc8, 0x41, 0x8f, 0x16, 0x4b, 0x20, 0xe1,
	0xf7, 0xf1, 0x75, 0x74, 0x12, 0x63, 0x82, 0xd2, 0xe9, 0x4d, 0x26, 0x98, 0x52, 0xc2, 0x64, 0x42,
	0x9e, 0x54, 0x78, 0x0e, 0x15, 0x76, 0xd6, 0xd0, 0x3d, 0xdd, 0x58, 0x51, 0x51, 0xf6, 0xfd, 0xfc,
	0x49, 0xe1, 0xe2, 0x45, 0xed, 0x5d, 0x85, 0x4d, 0x7c, 0xa8, 0xf1, 0xff, 0xec, 0x7c, 0xff, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0x39, 0x9d, 0x9b, 0x01, 0x12, 0x00, 0x00,
}
