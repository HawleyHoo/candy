// Code generated by protoc-gen-gogo.
// source: notice.proto
// DO NOT EDIT!

package meta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscribeRequest struct {
	// 用户ID
	ID int64 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	// 是要订阅，还是要取消
	Enable bool `protobuf:"varint,2,opt,name=Enable,json=enable,proto3" json:"Enable,omitempty"`
	// 用来区分用户的设备，如同一设备多次从不同的gate登录上来，则只推送最新的gate连接
	Device string `protobuf:"bytes,3,opt,name=Device,json=device,proto3" json:"Device,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{0} }

// PushRequest 推送的消息.
type PushRequest struct {
	ID  []PushID    `protobuf:"bytes,1,rep,name=ID,json=iD" json:"ID"`
	Msg PushMessage `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{1} }

func (m *PushRequest) GetID() []PushID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PushRequest) GetMsg() PushMessage {
	if m != nil {
		return m.Msg
	}
	return PushMessage{}
}

type PushResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptorNotice, []int{2} }

func (m *PushResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "candy.meta.SubscribeRequest")
	proto.RegisterType((*PushRequest)(nil), "candy.meta.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "candy.meta.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Push service

type PushClient interface {
	// Subscribe 订阅，取消，接收消息接口.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Push_SubscribeClient, error)
	// Push store调用的接口.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type pushClient struct {
	cc *grpc.ClientConn
}

func NewPushClient(cc *grpc.ClientConn) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Push_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Push_serviceDesc.Streams[0], c.cc, "/candy.meta.Push/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushSubscribeClient{stream}
	return x, nil
}

type Push_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*PushRequest, error)
	grpc.ClientStream
}

type pushSubscribeClient struct {
	grpc.ClientStream
}

func (x *pushSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushSubscribeClient) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Push/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Push service

type PushServer interface {
	// Subscribe 订阅，取消，接收消息接口.
	Subscribe(Push_SubscribeServer) error
	// Push store调用的接口.
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterPushServer(s *grpc.Server, srv PushServer) {
	s.RegisterService(&_Push_serviceDesc, srv)
}

func _Push_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServer).Subscribe(&pushSubscribeServer{stream})
}

type Push_SubscribeServer interface {
	Send(*PushRequest) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type pushSubscribeServer struct {
	grpc.ServerStream
}

func (x *pushSubscribeServer) Send(m *PushRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Push_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Push/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Push_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Push_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Push_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorNotice,
}

func (m *SubscribeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscribeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintNotice(data, i, uint64(m.ID))
	}
	if m.Enable {
		data[i] = 0x10
		i++
		if m.Enable {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Device) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintNotice(data, i, uint64(len(m.Device)))
		i += copy(data[i:], m.Device)
	}
	return i, nil
}

func (m *PushRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PushRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, msg := range m.ID {
			data[i] = 0xa
			i++
			i = encodeVarintNotice(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	data[i] = 0x12
	i++
	i = encodeVarintNotice(data, i, uint64(m.Msg.Size()))
	n1, err := m.Msg.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *PushResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PushResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNotice(data, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Notice(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Notice(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNotice(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovNotice(uint64(m.ID))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func (m *PushRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, e := range m.ID {
			l = e.Size()
			n += 1 + l + sovNotice(uint64(l))
		}
	}
	l = m.Msg.Size()
	n += 1 + l + sovNotice(uint64(l))
	return n
}

func (m *PushResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovNotice(uint64(l))
	}
	return n
}

func sovNotice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNotice(x uint64) (n int) {
	return sovNotice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID, PushID{})
			if err := m.ID[len(m.ID)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Msg.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotice(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotice(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNotice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotice(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("notice.proto", fileDescriptorNotice) }

var fileDescriptorNotice = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4e, 0xb3, 0x40,
	0x14, 0xc5, 0x3b, 0x85, 0x90, 0xaf, 0x03, 0xf9, 0x62, 0x26, 0xa6, 0x12, 0x62, 0x90, 0xb0, 0x9a,
	0x15, 0x35, 0xb8, 0x72, 0x4b, 0xd0, 0xd8, 0x45, 0x13, 0x33, 0x6e, 0x8c, 0x3b, 0xfe, 0xdc, 0x00,
	0x89, 0x30, 0x95, 0x01, 0x13, 0x1f, 0xc1, 0x9d, 0x8f, 0xd5, 0xa5, 0x4f, 0x60, 0x0c, 0xbe, 0x88,
	0x61, 0xa0, 0xda, 0xb4, 0x71, 0xc7, 0xb9, 0xf7, 0xc7, 0x39, 0x27, 0x77, 0xb0, 0x51, 0xf1, 0xa6,
	0x48, 0xc0, 0x5b, 0xd7, 0xbc, 0xe1, 0x04, 0x27, 0x51, 0x95, 0xbe, 0x78, 0x25, 0x34, 0x91, 0x75,
	0x9c, 0xf1, 0x8c, 0xcb, 0xf1, 0xa2, 0xff, 0x1a, 0x08, 0xcb, 0x48, 0x78, 0x59, 0xf2, 0x6a, 0x50,
	0x2e, 0xc3, 0x47, 0x77, 0x6d, 0x2c, 0x92, 0xba, 0x88, 0x81, 0xc1, 0x53, 0x0b, 0xa2, 0x21, 0xff,
	0xf1, 0x74, 0x19, 0x9a, 0xc8, 0x41, 0x54, 0x61, 0xd3, 0x22, 0x24, 0x73, 0xac, 0x5d, 0x55, 0x51,
	0xfc, 0x08, 0xe6, 0xd4, 0x41, 0xf4, 0x1f, 0xd3, 0x40, 0xaa, 0x7e, 0x1e, 0xc2, 0x73, 0x91, 0x80,
	0xa9, 0x38, 0x88, 0xce, 0x98, 0x96, 0x4a, 0xe5, 0xe6, 0x58, 0xbf, 0x6d, 0x45, 0xbe, 0xb5, 0xa3,
	0xa3, 0x9d, 0x42, 0x75, 0x9f, 0x78, 0xbf, 0xfd, 0xbc, 0x1e, 0x5a, 0x86, 0x81, 0xba, 0xf9, 0x38,
	0x9b, 0xc8, 0xa0, 0x05, 0x56, 0x56, 0x22, 0x93, 0x29, 0xba, 0x7f, 0xb2, 0x8f, 0xae, 0x40, 0x88,
	0x28, 0x83, 0x91, 0x57, 0x4a, 0x91, 0xb9, 0x01, 0x36, 0x86, 0x24, 0xb1, 0xe6, 0x95, 0x00, 0xe2,
	0x63, 0x2d, 0x87, 0x28, 0x85, 0x5a, 0xb6, 0xd7, 0x7d, 0x6b, 0xd7, 0x63, 0x4b, 0xdd, 0x48, 0x82,
	0x8d, 0xa4, 0xff, 0x8a, 0xb0, 0xda, 0x9b, 0x90, 0x6b, 0x3c, 0xfb, 0x39, 0x05, 0x39, 0xdd, 0xfd,
	0x73, 0xff, 0x42, 0xd6, 0x41, 0xb7, 0x71, 0x41, 0xd1, 0x39, 0x22, 0x97, 0xa3, 0xdf, 0x5f, 0x90,
	0x65, 0x1e, 0x2e, 0x86, 0x66, 0xc1, 0x7c, 0xd3, 0xd9, 0xe8, 0xbd, 0xb3, 0xd1, 0x67, 0x67, 0xa3,
	0xb7, 0x2f, 0x7b, 0xf2, 0xa0, 0xf6, 0xd0, 0xfd, 0x24, 0xd6, 0xe4, 0x73, 0x5d, 0x7c, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x19, 0xd2, 0x7f, 0xa2, 0xee, 0x01, 0x00, 0x00,
}
