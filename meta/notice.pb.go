// Code generated by protoc-gen-go.
// source: notice.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscribeRequest struct {
	// 用户ID
	ID int64 `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	// 是要订阅，还是要取消
	Enable bool `protobuf:"varint,2,opt,name=Enable,json=enable" json:"Enable,omitempty"`
	// 用来区分用户的设备，如同一设备多次从不同的gate登录上来，则只推送最新的gate连接
	Device string `protobuf:"bytes,3,opt,name=Device,json=device" json:"Device,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// PushRequest 推送的消息.
type PushRequest struct {
	ID  []*PushID    `protobuf:"bytes,1,rep,name=ID,json=iD" json:"ID,omitempty"`
	Msg *PushMessage `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PushRequest) GetID() []*PushID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PushRequest) GetMsg() *PushMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PushResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *PushResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "candy.meta.SubscribeRequest")
	proto.RegisterType((*PushRequest)(nil), "candy.meta.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "candy.meta.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Push service

type PushClient interface {
	// Subscribe 订阅，取消，接收消息接口.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Push_SubscribeClient, error)
	// Push store调用的接口.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type pushClient struct {
	cc *grpc.ClientConn
}

func NewPushClient(cc *grpc.ClientConn) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Push_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Push_serviceDesc.Streams[0], c.cc, "/candy.meta.Push/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushSubscribeClient{stream}
	return x, nil
}

type Push_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*PushRequest, error)
	grpc.ClientStream
}

type pushSubscribeClient struct {
	grpc.ClientStream
}

func (x *pushSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushSubscribeClient) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pushClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Push/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Push service

type PushServer interface {
	// Subscribe 订阅，取消，接收消息接口.
	Subscribe(Push_SubscribeServer) error
	// Push store调用的接口.
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterPushServer(s *grpc.Server, srv PushServer) {
	s.RegisterService(&_Push_serviceDesc, srv)
}

func _Push_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServer).Subscribe(&pushSubscribeServer{stream})
}

type Push_SubscribeServer interface {
	Send(*PushRequest) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type pushSubscribeServer struct {
	grpc.ServerStream
}

func (x *pushSubscribeServer) Send(m *PushRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Push_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Push/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Push_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Push_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Push_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("notice.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x49, 0x3b, 0x82, 0x7b, 0x2d, 0x22, 0x39, 0x68, 0x29, 0x1e, 0x4a, 0x4f, 0xf5, 0x52,
	0x24, 0x9e, 0xbc, 0x8e, 0x2a, 0xee, 0x30, 0x90, 0x78, 0x13, 0x2f, 0x69, 0xfa, 0xe8, 0x0a, 0x36,
	0x99, 0x4d, 0x2b, 0xf8, 0x11, 0xfc, 0xd6, 0xd2, 0xb4, 0xd3, 0xb1, 0xe1, 0xf1, 0xbd, 0xf7, 0x7b,
	0xbf, 0xfc, 0x93, 0x40, 0xa8, 0x4d, 0xdf, 0x28, 0xcc, 0x77, 0x9d, 0xe9, 0x0d, 0x03, 0x25, 0x75,
	0xf5, 0x95, 0xb7, 0xd8, 0xcb, 0x38, 0x54, 0xa6, 0x6d, 0x8d, 0x9e, 0x26, 0xa9, 0x80, 0x8b, 0x97,
	0xa1, 0xb4, 0xaa, 0x6b, 0x4a, 0x14, 0xf8, 0x31, 0xa0, 0xed, 0xd9, 0x39, 0x78, 0xeb, 0x22, 0x22,
	0x09, 0xc9, 0x7c, 0xe1, 0x35, 0x05, 0xbb, 0x04, 0xfa, 0xa0, 0x65, 0xf9, 0x8e, 0x91, 0x97, 0x90,
	0xec, 0x4c, 0x50, 0x74, 0xd5, 0xd8, 0x2f, 0xf0, 0xb3, 0x51, 0x18, 0xf9, 0x09, 0xc9, 0x96, 0x82,
	0x56, 0xae, 0x4a, 0xdf, 0x20, 0x78, 0x1e, 0xec, 0x76, 0xaf, 0x4b, 0x67, 0x9d, 0x9f, 0x05, 0x9c,
	0xe5, 0x7f, 0x49, 0xf2, 0x11, 0x5a, 0x17, 0xee, 0x88, 0x1b, 0xf0, 0x37, 0xb6, 0x76, 0xfe, 0x80,
	0x5f, 0x1d, 0x43, 0x1b, 0xb4, 0x56, 0xd6, 0x28, 0xfc, 0xd6, 0xd6, 0xe9, 0x0a, 0xc2, 0xc9, 0x6e,
	0x77, 0x46, 0x5b, 0x64, 0x1c, 0xe8, 0x16, 0x65, 0x85, 0x9d, 0x4b, 0x1c, 0xf0, 0xf8, 0x70, 0x7b,
	0x4f, 0x3d, 0x39, 0x42, 0xcc, 0x24, 0xff, 0x26, 0xb0, 0x18, 0x25, 0xec, 0x11, 0x96, 0xbf, 0xd7,
	0x67, 0xd7, 0x87, 0x9b, 0xc7, 0xaf, 0x12, 0x9f, 0xa4, 0x9a, 0x07, 0x19, 0xb9, 0x25, 0xec, 0x7e,
	0xf6, 0xfd, 0x07, 0xc5, 0xd1, 0xe9, 0x60, 0x4a, 0xb6, 0xa2, 0xaf, 0x8b, 0xb1, 0x59, 0x52, 0xf7,
	0x21, 0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xd4, 0x2a, 0xf2, 0xba, 0x01, 0x00, 0x00,
}
