// Code generated by protoc-gen-go.
// source: notice.proto
// DO NOT EDIT!

package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscribeRequest struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type SubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type UnSubscribeRequest struct {
	ID   int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *UnSubscribeRequest) Reset()                    { *m = UnSubscribeRequest{} }
func (m *UnSubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnSubscribeRequest) ProtoMessage()               {}
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type UnSubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UnSubscribeResponse) Reset()                    { *m = UnSubscribeResponse{} }
func (m *UnSubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*UnSubscribeResponse) ProtoMessage()               {}
func (*UnSubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *UnSubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type PushRequest struct {
	ID  []*PushID    `protobuf:"bytes,1,rep,name=ID,json=iD" json:"ID,omitempty"`
	Msg *PushMessage `protobuf:"bytes,2,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *PushRequest) GetID() []*PushID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PushRequest) GetMsg() *PushMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PushResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *PushResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "candy.meta.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "candy.meta.SubscribeResponse")
	proto.RegisterType((*UnSubscribeRequest)(nil), "candy.meta.UnSubscribeRequest")
	proto.RegisterType((*UnSubscribeResponse)(nil), "candy.meta.UnSubscribeResponse")
	proto.RegisterType((*PushRequest)(nil), "candy.meta.PushRequest")
	proto.RegisterType((*PushResponse)(nil), "candy.meta.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NoticeService service

type NoticeServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type noticeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNoticeServiceClient(cc *grpc.ClientConn) NoticeServiceClient {
	return &noticeServiceClient{cc}
}

func (c *noticeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.NoticeService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error) {
	out := new(UnSubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.NoticeService/UnSubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.NoticeService/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NoticeService service

type NoticeServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	UnSubscribe(context.Context, *UnSubscribeRequest) (*UnSubscribeResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterNoticeServiceServer(s *grpc.Server, srv NoticeServiceServer) {
	s.RegisterService(&_NoticeService_serviceDesc, srv)
}

func _NoticeService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.NoticeService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.NoticeService/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).UnSubscribe(ctx, req.(*UnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.NoticeService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoticeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.NoticeService",
	HandlerType: (*NoticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _NoticeService_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _NoticeService_UnSubscribe_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _NoticeService_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("notice.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x4b, 0xb4, 0x50,
	0x14, 0xc6, 0x0f, 0x84, 0x39, 0xfa, 0xbe, 0xd4, 0x69, 0x91, 0x48, 0x1f, 0x83, 0x2b, 0xdb, 0xb8,
	0x30, 0x88, 0xda, 0x0e, 0x42, 0xe3, 0x62, 0x86, 0x70, 0x68, 0x13, 0x6d, 0xd4, 0x39, 0xa8, 0x0b,
	0xbd, 0x93, 0x57, 0x83, 0xfe, 0x6f, 0x3f, 0x24, 0xbc, 0x6a, 0xd9, 0xc8, 0x6c, 0xa6, 0x9d, 0xf8,
	0x7c, 0x9c, 0xe7, 0x3c, 0xe7, 0x82, 0x51, 0xb2, 0x3a, 0x4f, 0xc8, 0xdd, 0x55, 0xac, 0x66, 0x08,
	0x49, 0x54, 0x6e, 0x3f, 0xdc, 0x82, 0xea, 0xc8, 0x32, 0x12, 0x56, 0x14, 0xac, 0xec, 0x10, 0xfb,
	0x0e, 0x4e, 0x36, 0x4d, 0xcc, 0x93, 0x2a, 0x8f, 0x29, 0xa4, 0xb7, 0x86, 0x78, 0x8d, 0xff, 0x41,
	0x0e, 0x7c, 0x53, 0x9a, 0x4b, 0x8e, 0x12, 0xca, 0xb9, 0x8f, 0x08, 0x6a, 0xc6, 0x78, 0x6d, 0xca,
	0x73, 0xc9, 0x99, 0x85, 0xe2, 0xdb, 0x7e, 0x84, 0xd3, 0x91, 0x8e, 0xef, 0x58, 0xc9, 0x09, 0x3d,
	0xd0, 0x32, 0x8a, 0xb6, 0x54, 0x09, 0xb1, 0xee, 0x59, 0xee, 0xcf, 0x5c, 0x77, 0x60, 0x2d, 0x05,
	0x23, 0xec, 0x99, 0xf6, 0x3d, 0xe0, 0x73, 0x79, 0x54, 0x84, 0x00, 0xce, 0x7e, 0x29, 0xff, 0x10,
	0xe2, 0x15, 0xf4, 0xa7, 0x86, 0x67, 0xc3, 0x74, 0xbb, 0x9f, 0xae, 0x38, 0xba, 0x87, 0x63, 0x79,
	0x4b, 0x0a, 0x7c, 0x91, 0xe8, 0x06, 0x94, 0x15, 0x4f, 0x45, 0x20, 0xdd, 0x3b, 0xdf, 0x27, 0xad,
	0x88, 0xf3, 0x28, 0xa5, 0x50, 0x29, 0x78, 0x6a, 0x2f, 0xc0, 0xe8, 0xdc, 0x8f, 0x4f, 0xe8, 0x7d,
	0x4a, 0xf0, 0x6f, 0x2d, 0x4e, 0xba, 0xa1, 0xea, 0x3d, 0x4f, 0x08, 0x97, 0x30, 0xfb, 0x5e, 0x1e,
	0x2f, 0xc6, 0x16, 0xfb, 0x6d, 0x5a, 0x97, 0x07, 0xd0, 0x3e, 0xcf, 0x1a, 0xf4, 0x51, 0x91, 0x78,
	0x35, 0x66, 0x4f, 0x6f, 0x63, 0x5d, 0x1f, 0xc4, 0x7b, 0xbf, 0x07, 0x50, 0xdb, 0x7d, 0x71, 0xd2,
	0xca, 0xe0, 0x60, 0x4e, 0x81, 0x4e, 0xba, 0xd0, 0x5e, 0xd4, 0xf6, 0x67, 0xac, 0x89, 0xd7, 0x79,
	0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x87, 0x68, 0xf2, 0xf5, 0xc7, 0x02, 0x00, 0x00,
}
